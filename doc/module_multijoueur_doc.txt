MODULE MULTIJOUEUR - Basé sur protocole 1.7


Le module est découpé en 2 grandes parties :
- Une partie utilitaire qui contient des classes pour créer, former et parser des Messages.
- Une partie implémentant le serveur et le client.

Les messages consistent en l'envoi d'un flux de bytes entre serveur et client.
Le protocole utilisé par ces messages est défini dans protocole.txt


UTILISATION :

Pour créer un serveur, un objet CarcassonneServer doit être instancié.
Son fonctionnement est totalement indépendant du reste des composantes de Carcassonne. Il peut donc être exécuté sur une autre machine.

La méthode startServer() démarre le serveur.
Le serveur écoute sur le port 54322.


=========================================================================

Implementation du client au moteur de jeu :

Pour utiliser le client et interfacer votre moteur de jeu avec le module, vous devrez implémenter l'interface ClientFactory.
Un objet Client devra être créé en prenant comme paramètres l'adresse du serveur (String), le port et votre implémentation.


=========================================================================

Méthodes de l'interface ClientFactory :

	// Transformer le numéro du joueur vers une implémentation spécifique
	Object getPlayers(Set<Integer> p);
	
	// Transformer les objets associés aux coordonnées de grille en entiers
	int setX(Object o);
	int setY(Object o);
	
	String setTile(Object o);
	String setOrientation(Object o);
	String setPiece(Object o);
	
	// Vérification du mouvement d'une pièce par le moteur
	boolean checkMove(int player, String tile, int x, int y, String o, String piece);


Vous devez implémenter ces méthodes pour faire les associations entre les données de votre implémentation et celles définies par le protocole.


=========================================================================

Méthodes publiques de Client :

	// notifie prêt
	public void ready();

	// notifie une déconnexion prévue
	public void disconnect();

	// notifie une partie terminée
	public void finish();

	// notifie au serveur qu'on est d'accord avec le dernier placement
	public void validMove();

	// notifie au serveur qu'on n'est pas d'accord avec le dernier placement
	public void invalidMove();

	// récupère la liste des joueurs de la partie
	public Object getPlayers();

	// notifie aux autres clients notre placement de tuile
	// ot = tuile
	// ox = coordonnée x
	// oy = coordonnée y
	// oo = orientation
	// op = pion
	// La paramètres appellent automatiquement les fonctions implémentées (setX, setY, setOrientation, etc.)
	// Il vous suffit donc de passer en paramètre ce que vos objets qui seront convertis via les méthodes implémentées
	public boolean move(Object ot, Object ox, Object oy, Object oo, Object op);

	// méthodes utilitaires
	public ClientFactory getFactory();
	public void setFactory(ClientFactory factory);
	public Socket getSocket();
	public void setSocket(Socket socket);
	public boolean hasStarted();   // si la partie a démarré
	public boolean isFinished();   // si la partie s'est terminée
	public boolean isAccepted();   // si la tuile placée a été acceptée
	public int getToken();         // récupère le token. La valeur du token vaut 0 par défaut.
	                               // si la valeur est différente de 0, la main est donné au joueur
	                               // si un move est effectué ET accepté, token reprend la valeur 0


=========================================================================


Exemple d'implémentation d'un client :

Dans mon moteur de jeu, ma position dans une grille est représentée par un objet Position qui contient des méthodes :
int posX()
int posY()

public class MonImplementation implements ClientFactory {

	public MonImplementation {

		...
	}

	int setX(Object o) {
		Position p = (Position) o;
		return p.posX();
	}
	
	/*
	 * Quand le client reçoit un move d'un autre client, cette méthode est implicitement appellée
	 * Si la tuile est acceptée, la tuile sera placé sur votre plateau (placer(...)) et vous renvoyez vrai
	 * Sinon vous renvoyez faux et il n'y a aucun conséquence sur le jeu
	 * C'est donc dans cette méthode que doit être effectué le placement des autres tuiles.
	 */
	boolean checkMove(int player, String tile, int x, int y, String o, String piece) {
	   MaRepresentation joueur = getId(player);
	   MareprésentationX posX = x;
	   ...
	   
	   if (canPlace(tile, x, y))
	       placer(tile, x, y);
	   else
	       return false;
	
	   return true;
	}

	...

}


public class MaClasse {


	public static void main(String[] args) {

		Client c = new Client(adresse, port, new MonImplementation);
		
		if (...)
			c.ready();

		...
	}
}















